package marketdatarequest

import (
	"fmt"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"

	"github.com/google/uuid"
	"github.com/quickfixgo/enum"
	"github.com/quickfixgo/field"
	"github.com/quickfixgo/quickfix"
	"github.com/rs/zerolog"
	"github.com/spf13/cobra"

	mdr50sp1 "github.com/quickfixgo/fix50sp1/marketdatarequest"
	mdr50sp2 "github.com/quickfixgo/fix50sp2/marketdatarequest"

	"sylr.dev/fix/config"
	"sylr.dev/fix/pkg/cli/complete"
	"sylr.dev/fix/pkg/dict"
	"sylr.dev/fix/pkg/errors"
	"sylr.dev/fix/pkg/initiator"
	"sylr.dev/fix/pkg/initiator/application"
	"sylr.dev/fix/pkg/utils"
)

var (
	optionTypes    []string
	optionSymbols  []string
	optionFullSnap bool
	optionSubType  string
	optionMDReqID  string
)

var MarketDataRequestCmd = &cobra.Command{
	Use:               "request",
	Short:             "Send a MarketDataRequest FIX message",
	Long:              "Send a MarketDataRequest FIX Message after initiating a session with a FIX ctxInitiator.",
	Args:              cobra.ExactArgs(0),
	ValidArgsFunction: cobra.NoFileCompletions,
	PersistentPreRunE: func(cmd *cobra.Command, args []string) error {
		err := Validate(cmd, args)
		if err != nil {
			return err
		}

		if cmd.HasParent() {
			parent := cmd.Parent()
			if parent.PersistentPreRunE != nil {
				return parent.PersistentPreRunE(cmd, args)
			}
		}
		return nil
	},
	RunE: Execute,
}

func init() {
	MarketDataRequestCmd.Flags().StringArrayVar(&optionSymbols, "symbol", []string{}, "Symbols")
	MarketDataRequestCmd.Flags().StringArrayVar(&optionTypes, "type", []string{"bid", "offer"}, "Order type (offer, bid, trade)")
	MarketDataRequestCmd.Flags().StringVar(&optionSubType, "sub-typ", "snapshot", "Subscription type")
	MarketDataRequestCmd.Flags().StringVar(&optionMDReqID, "id", "", "MarketDataRequest id (uuid autogenerated if not given)")
	utils.AddBothBoolFlags(MarketDataRequestCmd.Flags(), &optionFullSnap, "full", "", true, "Use full increment snapshots")

	MarketDataRequestCmd.RegisterFlagCompletionFunc("symbol", cobra.NoFileCompletions)
	MarketDataRequestCmd.RegisterFlagCompletionFunc("type", complete.MDEntryTypes)
	MarketDataRequestCmd.RegisterFlagCompletionFunc("sub-type", complete.SubscriptionRequestTypes)
}

func Validate(cmd *cobra.Command, args []string) error {
	err := utils.ReconcileBoolFlags(cmd.Flags())
	if err != nil {
		return err
	}

	if len(optionSymbols) == 0 {
		return errors.OptionsNoSymbolGiven
	}

	if len(optionTypes) == 0 {
		return errors.OptionsNoTypeGiven
	}

	for _, t := range optionTypes {
		if _, ok := dict.MDEntryTypesReversed[strings.ToUpper(t)]; !ok {
			return fmt.Errorf("%w: unkonwn type `%s`", errors.Options, t)
		}
	}

	if _, ok := dict.SubscriptionRequestTypesReversed[strings.ToUpper(optionSubType)]; !ok {
		return fmt.Errorf("%w: unkonwn subscription type `%s`", errors.Options, optionSubType)
	}

	if len(optionMDReqID) == 0 {
		uid := uuid.New()
		optionMDReqID = uid.String()
	}

	return nil
}

func Execute(cmd *cobra.Command, args []string) error {
	options := config.GetOptions()
	logger := config.GetLogger()

	context, err := config.GetCurrentContext()
	if err != nil {
		return err
	}

	sessions, err := context.GetSessions()
	if err != nil {
		return err
	}

	ctxInitiator, err := context.GetInitiator()
	if err != nil {
		return err
	}

	session := sessions[0]
	transportDict, appDict, err := session.GetFIXDictionaries()
	if err != nil {
		return err
	}

	settings, err := context.ToQuickFixInitiatorSettings()
	if err != nil {
		return err
	}

	app := application.NewMarketDataRequest()
	app.Logger = logger
	app.Settings = settings
	app.TransportDataDictionary = transportDict
	app.AppDataDictionary = appDict

	var quickfixLogger *zerolog.Logger
	if options.QuickFixLogging {
		quickfixLogger = logger
	}

	init, err := initiator.Initiate(app, settings, quickfixLogger)
	if err != nil {
		return err
	}

	// Start session
	err = init.Start()
	if err != nil {
		return err
	}

	defer init.Stop()

	// Choose right timeout cli option > config > default value (5s)
	var timeout time.Duration
	if options.Timeout != time.Duration(0) {
		timeout = options.Timeout
	} else if ctxInitiator.SocketTimeout != time.Duration(0) {
		timeout = ctxInitiator.SocketTimeout
	} else {
		timeout = 5 * time.Second
	}

	// Wait for session connection
	select {
	case <-time.After(timeout):
		return errors.ConnectionTimeout
	case _, ok := <-app.Connected:
		if !ok {
			return errors.FixLogout
		}
	}

	// Prepare securitylist
	securitylist, err := buildMessage(*session)
	if err != nil {
		return err
	}

	// Send the order
	err = quickfix.Send(securitylist)
	if err != nil {
		return err
	}

	interrupt := make(chan os.Signal, 1)
	signal.Notify(interrupt, os.Interrupt, syscall.SIGTERM)

LOOP:
	for {
		select {
		case signal := <-interrupt:
			logger.Debug().Msgf("Received signal: %s", signal)
			break LOOP
		case _, ok := <-app.FromAppChan:
			if !ok {
				break LOOP
			}
		}
	}

	return nil
}

func buildMessage(session config.Session) (quickfix.Messagable, error) {
	var messagable quickfix.Messagable

	mdReqID := field.NewMDReqID(optionMDReqID)
	subReqType := field.NewSubscriptionRequestType(dict.SubscriptionRequestTypesReversed[strings.ToUpper(optionSubType)])
	marketDepth := field.NewMarketDepth(0)

	var updateType enum.MDUpdateType
	if optionFullSnap {
		updateType = enum.MDUpdateType_FULL_REFRESH
	} else {
		updateType = enum.MDUpdateType_INCREMENTAL_REFRESH
	}

	switch session.BeginString {
	case quickfix.BeginStringFIXT11:
		switch session.DefaultApplVerID {
		case "FIX.5.0SP1":
			request := mdr50sp1.New(mdReqID, subReqType, marketDepth)
			request.SetMDUpdateType(updateType)

			entryTypes := mdr50sp1.NewNoMDEntryTypesRepeatingGroup()
			for _, t := range optionTypes {
				entryTypes.Add().SetMDEntryType(dict.MDEntryTypesReversed[strings.ToUpper(t)])
			}
			request.SetNoMDEntryTypes(entryTypes)

			relatedSym := mdr50sp1.NewNoRelatedSymRepeatingGroup()
			for _, sym := range optionSymbols {
				relatedSym.Add().SetSymbol(sym)
			}
			request.SetNoRelatedSym(relatedSym)

			messagable = request.Message
		case "FIX.5.0SP2":
			request := mdr50sp2.New(mdReqID, subReqType, marketDepth)
			request.SetMDUpdateType(updateType)

			entryTypes := mdr50sp2.NewNoMDEntryTypesRepeatingGroup()
			for _, t := range optionTypes {
				entryTypes.Add().SetMDEntryType(dict.MDEntryTypesReversed[strings.ToUpper(t)])
			}
			request.SetNoMDEntryTypes(entryTypes)

			relatedSym := mdr50sp2.NewNoRelatedSymRepeatingGroup()
			for _, sym := range optionSymbols {
				relatedSym.Add().SetSymbol(sym)
			}
			request.SetNoRelatedSym(relatedSym)

			messagable = request.Message
		default:
			return nil, errors.FixVersionNotImplemented
		}
	default:
		return nil, errors.FixVersionNotImplemented
	}

	message := messagable.ToMessage()
	utils.QuickFixMessagePartSet(&message.Header, session.TargetCompID, field.NewTargetCompID)
	utils.QuickFixMessagePartSet(&message.Header, session.TargetSubID, field.NewTargetSubID)
	utils.QuickFixMessagePartSet(&message.Header, session.SenderCompID, field.NewSenderCompID)
	utils.QuickFixMessagePartSet(&message.Header, session.SenderSubID, field.NewSenderSubID)

	return message, nil
}
